<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" />
  <title>Logik</title>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-dark text-center">
    <a class="navbar-brand text-white" href="{% url 'index'%}">LOGIK</a>
    <a class="navbar-brand text-white" href="{% url 'input'%}">MANUAL INPUT</a>
    <a class="navbar-brand text-white" href="{% url 'camera'%}">Camera</a>
  </nav>

  <div class="container mt-5">
    <iframe id="video_embedded" class="vid" id="yt" width="620" height="420"
      src="https://www.youtube.com/embed/tgbNymZ7vqY?controls=0">
    </iframe>
  </div>

  <main>
    <p> <button id="btnStart" class="btn btn-dark btn-lg">Start recording </button>
      <button id="btnStop" class="btn btn-danger btn-lg">Stop recording</button>
      <!-- <button id="download">download </button> -->
    </p>
    <video controls></video>
    <video id="vid2" controls></video>
    <form onSubmit="return uploadFile()">
      <input type="text" id="access-token" placeholder="Access token" />
      <input type="file" id="file-upload" />
      <button type="submit">Submit</button>
    </form>
  </main>



  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>

  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>

  <script type="text/javascript">

    let constraintObj = {
      audio: false,
      video: {
        facingMode: "user",
        // width: { min: 640, ideal: 1280, max: 1920 },
        // height: { min: 480, ideal: 720, max: 1080 } 
      }
    };
    //handle older browsers that might implement getUserMedia in some way
    if (navigator.mediaDevices === undefined) {
      navigator.mediaDevices = {};
      navigator.mediaDevices.getUserMedia = function (constraintObj) {
        let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
        if (!getUserMedia) {
          return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
        }
        return new Promise(function (resolve, reject) {
          getUserMedia.call(navigator, constraintObj, resolve, reject);
        });
      }
    } else {
      navigator.mediaDevices.enumerateDevices()
        .then(devices => {
          devices.forEach(device => {
            console.log(device.kind.toUpperCase(), device.label);
            //, device.deviceId
          })
        })
        .catch(err => {
          console.log(err.name, err.message);
        })
    }

    navigator.mediaDevices.getUserMedia(constraintObj)
      .then(function (mediaStreamObj) {
        //connect the media stream to the first video element
        let video = document.querySelector('video');
        if ("srcObject" in video) {
          video.srcObject = mediaStreamObj;
        } else {
          //old version
          video.src = window.URL.createObjectURL(mediaStreamObj);
        }
        // video.onloadedmetadata = function (ev) {
        //   //show in the video element what is being captured by the webcam
        //   video.play();
        // };

        //add listeners for saving video/audio
        let start = document.getElementById('btnStart');
        let stop = document.getElementById('btnStop');
        let vidSave = document.getElementById('vid2');
        // let download = document.getElementById('download');
        let mediaRecorder = new MediaRecorder(mediaStreamObj);
        let chunks = [];

        start.addEventListener('click', (ev) => {
          mediaRecorder.start();
          console.log(mediaRecorder.state);
        });
        stop.addEventListener('click', (ev) => {
          mediaRecorder.stop();
          console.log(mediaRecorder.state);
          mediaStreamObj.getTracks()[0].stop();
          // mediaStreamObj.getTracks()[1].stop();
        });
        mediaRecorder.ondataavailable = function (ev) {
          chunks.push(ev.data);
        }
        mediaRecorder.onstop = (ev) => {
          let recordedblob = new Blob(chunks, { 'type': 'video/mp4;' });
          vidSave.src = window.URL.createObjectURL(recordedblob);
          chunks = [];
          // btnStop.href = vidSave.src;
          // btnStop.download = " ";
        }
        // download.addEventListener('click', (ev) => {
        //   download.href = videSave.src;
        //   download.download = "recordedvideo.mp4";
        // });
      })
      .catch(function (err) {
        console.log(err.name, err.message);
      });

    var bucketName = kavtech - intern;
    var bucketRegion = us - east - 1;
    var IdentityPoolId = IDENTITY_POOL_ID;

    AWS.config.update({
      region: bucketRegion,
      credentials: new AWS.CognitoIdentityCredentials({
        IdentityPoolId: IdentityPoolId
      })
    });
  </script>

  <script>
    function uploadFile() {

      const UPLOAD_FILE_SIZE_LIMIT = 150 * 1024 * 1024;
      var ACCESS_TOKEN = document.getElementById('access-token').value;
      var dbx = new Dropbox.Dropbox({ accessToken: ACCESS_TOKEN });
      var fileInput = document.getElementById('file-upload');
      var file = fileInput.files[0];


      if (file.size < UPLOAD_FILE_SIZE_LIMIT) { // File is smaller than 150 Mb - use filesUpload API
        dbx.filesUpload({ path: '/' + file.name, contents: file })
          .then(function (response) {
            var results = document.getElementById('results');
            var br = document.createElement("br");
            results.appendChild(document.createTextNode('File uploaded!'));
            results.appendChild(br);
            console.log(response);
          })
          .catch(function (error) {
            console.error(error);
          });
      } else { // File is bigger than 150 Mb - use filesUploadSession* API
        const maxBlob = 8 * 1000 * 1000; // 8Mb - Dropbox JavaScript API suggested max file / chunk size

        var workItems = [];

        var offset = 0;

        while (offset < file.size) {
          var chunkSize = Math.min(maxBlob, file.size - offset);
          workItems.push(file.slice(offset, offset + chunkSize));
          offset += chunkSize;
        }

        const task = workItems.reduce((acc, blob, idx, items) => {
          if (idx == 0) {
            // Starting multipart upload of file
            return acc.then(function () {
              return dbx.filesUploadSessionStart({ close: false, contents: blob })
                .then(response => response.session_id)
            });
          } else if (idx < items.length - 1) {
            // Append part to the upload session
            return acc.then(function (sessionId) {
              var cursor = { session_id: sessionId, offset: idx * maxBlob };
              return dbx.filesUploadSessionAppendV2({ cursor: cursor, close: false, contents: blob }).then(() => sessionId);
            });
          } else {
            // Last chunk of data, close session
            return acc.then(function (sessionId) {
              var cursor = { session_id: sessionId, offset: file.size - blob.size };
              var commit = { path: '/' + file.name, mode: 'add', autorename: true, mute: false };
              return dbx.filesUploadSessionFinish({ cursor: cursor, commit: commit, contents: blob });
            });
          }
        }, Promise.resolve());

        task.then(function (result) {
          var results = document.getElementById('results');
          results.appendChild(document.createTextNode('File uploaded!'));
        }).catch(function (error) {
          console.error(error);
        });

      }
      return false;
    }
  </script>



</body>

</html>